<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.example.demo.domain.project.mapper.ProjectMapper">
	
<resultMap id="projectMap" type="com.example.demo.domain.project.entity.Project">
    <id property="projectSq" column="project_sq"/>
    <result property="companySq" column="company_sq"/>
    <result property="addressSq" column="address_sq"/>
    <result property="projectTtl" column="project_ttl"/>
    <result property="projectImageUrl" column="project_image_url"/>
    <result property="projectDeveloperGradeCd" column="project_developer_grade_cd"/>
    <result property="projectRequiredEducationCd" column="project_required_education_cd"/>
    <result property="projectSalary" column="project_salary"/>
    <result property="projectStartDt" column="project_start_dt"/>
    <result property="projectEndDt" column="project_end_dt"/>
    <result property="projectRecruitStartDt" column="project_recruit_start_dt"/>
    <result property="projectRecruitEndDt" column="project_recruit_end_dt"/>
    <result property="projectPreferenceTxt" column="project_preference_txt"/>
    <result property="projectDescriptionTxt" column="project_description_txt"/>
    <result property="projectCreatedAtDtm" column="project_created_at_dtm"/>
    <result property="projectModifiedAtDtm" column="project_modified_at_dtm"/>
    <result property="projectCandidateCnt" column="project_candidate_cnt"/>
    <result property="projectScrapCnt" column="project_scrap_cnt"/>
    <result property="projectIsNotificationYn" column="project_is_notification_yn"/>
    <result property="projectIsDeletedYn" column="project_is_deleted_yn"/>
    <result property="projectViewCnt" column="project_view_cnt"/>
</resultMap>
    <select id="findProjectsBySearch"
        parameterType="com.example.demo.domain.project.dto.request.ProjectSearchRequest"
        resultMap="projectMap">

  SELECT *
  FROM TBL_PROJECT_M p
  WHERE p.project_is_deleted_yn = 'N'

  <if test="addressCodeSq != null">
    AND p.address_sq IN (
      SELECT address_sq
      FROM TBL_ADDRESS_S
      WHERE area_code_sq IN (
        SELECT area_code_sq
        FROM TBL_AREA_C
        WHERE parent_area_code_sq = #{addressCodeSq}
      )
    )
  </if>

  <if test="projectDeveloperGradeCd != null">
    AND p.project_developer_grade_cd = #{projectDeveloperGradeCd}
  </if>

  <if test="educationCd != null">
    AND p.project_required_education_cd = #{educationCd}
  </if>

  <if test="jobRoleCd != null">
    AND EXISTS (
      SELECT 1
      FROM TBL_PROJECT_RECRUIT_JOB_ROLE_S jr
      WHERE jr.project_sq = p.project_sq
        AND jr.recruit_job_position_type_cd = #{jobRoleCd}
    )
  </if>

  <if test="searchKeyword != null and searchKeyword != ''">
    <choose>
      <when test="searchType == '제목'">
        AND p.project_ttl LIKE CONCAT('%', #{searchKeyword}, '%')
      </when>
      <when test="searchType == '작성자명'">
        AND EXISTS (
          SELECT *
          FROM TBL_COMPANY_S c
          JOIN TBL_USER_M u ON c.user_sq = u.user_sq
          WHERE c.company_sq = p.company_sq
            AND u.user_nm LIKE CONCAT('%', #{searchKeyword}, '%')
        )
      </when>
      <when test="searchType == '내용'">
        AND (
          p.project_preference_txt LIKE CONCAT('%', #{searchKeyword}, '%')
          OR p.project_description_txt LIKE CONCAT('%', #{searchKeyword}, '%')
        )
      </when>
      <otherwise>
        AND (
          p.project_ttl LIKE CONCAT('%', #{searchKeyword}, '%')
          OR p.project_description_txt LIKE CONCAT('%', #{searchKeyword}, '%')
          OR p.project_preference_txt LIKE CONCAT('%', #{searchKeyword}, '%')
        )
      </otherwise>
    </choose>
  </if>

  <choose>
    <when test="sortBy != null and sortOrder != null">
      <choose>
        <when test="sortBy == 'project_start_dt'">
          ORDER BY p.project_created_at_dtm ${sortOrder}
        </when>
        <when test="sortBy == 'view_count'">
          ORDER BY p.project_view_cnt ${sortOrder}
        </when>
        <when test="sortBy == 'applicant_count'">
          ORDER BY p.project_candidate_cnt ${sortOrder}
        </when>
        <otherwise>
          ORDER BY p.project_created_at_dtm DESC
        </otherwise>
      </choose>
    </when>
    <otherwise>
      ORDER BY p.project_created_at_dtm DESC
    </otherwise>
  </choose>

  <if test="size != null and offset != null">
    LIMIT #{size} OFFSET #{offset}
  </if>

</select>

	
	<select id="findProjectsByCompany" resultMap="projectMap">
    SELECT *
    FROM TBL_PROJECT_M p
    WHERE company_sq = #{companySq}	AND project_is_deleted_yn = 'N'
    
    
    
    <if test="request.keyword != null and request.searchType == 'title'">
	    AND p.project_ttl LIKE CONCAT('%', #{request.keyword}, '%')
	</if>
	<if test="request.keyword != null and request.searchType == 'content'">
	    AND ( p.project_description_txt LIKE CONCAT('%', #{request.keyword}, '%') OR p.project_preference_txt LIKE CONCAT('%', #{request.keyword}, '%') )
	</if>
	<if test="request.keyword != null and request.searchType == 'all'">
	    AND (
	        p.project_ttl LIKE CONCAT('%', #{request.keyword}, '%')
	        OR p.project_description_txt LIKE CONCAT('%', #{request.keyword}, '%')
	        OR p.project_preference_txt LIKE CONCAT('%', #{request.keyword}, '%')
	    )
	</if>
	
	<if test="request.status == 'recruiting'">
    <![CDATA[
      AND NOW() BETWEEN project_recruit_start_dt AND project_recruit_end_dt
    ]]>
	  </if>
	
	  <if test="request.status == 'scheduled'">
	    <![CDATA[
	      AND NOW() < project_recruit_start_dt
	    ]]>
	  </if>
	
	  <if test="request.status == 'closed'">
	    <![CDATA[
	      AND NOW() > project_recruit_end_dt
	    ]]>
	  </if>
    
    <if test="request.size != null and request.offset != null">
        LIMIT #{request.size} OFFSET #{request.offset}
    </if>
    
	</select>
	
	<select id="countProjectsBySearch"
        parameterType="com.example.demo.domain.project.dto.request.ProjectSearchRequest"
        resultType="Long">

     SELECT COUNT(*)
  FROM TBL_PROJECT_M p
  WHERE p.project_is_deleted_yn = 'N'

  <if test="addressCodeSq != null">
    AND p.address_sq IN (
      SELECT address_sq
      FROM TBL_ADDRESS_S
      WHERE area_code_sq IN (
        SELECT area_code_sq
        FROM TBL_AREA_C
        WHERE parent_area_code_sq = #{addressCodeSq}
      )
    )
  </if>

  <if test="projectDeveloperGradeCd != null">
    AND p.project_developer_grade_cd = #{projectDeveloperGradeCd}
  </if>

  <if test="educationCd != null">
    AND p.project_required_education_cd = #{educationCd}
  </if>

  <if test="jobRoleCd != null">
    AND EXISTS (
      SELECT 1
      FROM TBL_PROJECT_RECRUIT_JOB_ROLE_S jr
      WHERE jr.project_sq = p.project_sq
        AND jr.recruit_job_position_type_cd = #{jobRoleCd}
    )
  </if>

  <if test="searchKeyword != null and searchKeyword != ''">
    <choose>
      <when test="searchType == '제목'">
        AND p.project_ttl LIKE CONCAT('%', #{searchKeyword}, '%')
      </when>
      <when test="searchType == '작성자명'">
        AND EXISTS (
          SELECT *
          FROM TBL_COMPANY_S c
          JOIN TBL_USER_M u ON c.user_sq = u.user_sq
          WHERE c.company_sq = p.company_sq
            AND u.user_nm LIKE CONCAT('%', #{searchKeyword}, '%')
        )
      </when>
      <when test="searchType == '내용'">
        AND (
          p.project_preference_txt LIKE CONCAT('%', #{searchKeyword}, '%')
          OR p.project_description_txt LIKE CONCAT('%', #{searchKeyword}, '%')
        )
      </when>
      <otherwise>
        AND (
          p.project_ttl LIKE CONCAT('%', #{searchKeyword}, '%')
          OR p.project_description_txt LIKE CONCAT('%', #{searchKeyword}, '%')
          OR p.project_preference_txt LIKE CONCAT('%', #{searchKeyword}, '%')
        )
      </otherwise>
    </choose>
  </if>

  <choose>
    <when test="sortBy != null and sortOrder != null">
      <choose>
        <when test="sortBy == 'project_start_dt'">
          ORDER BY p.project_created_at_dtm ${sortOrder}
        </when>
        <when test="sortBy == 'view_count'">
          ORDER BY p.project_view_cnt ${sortOrder}
        </when>
        <when test="sortBy == 'applicant_count'">
          ORDER BY p.project_candidate_cnt ${sortOrder}
        </when>
        <otherwise>
          ORDER BY p.project_created_at_dtm DESC
        </otherwise>
      </choose>
    </when>
    <otherwise>
      ORDER BY p.project_created_at_dtm DESC
    </otherwise>
  </choose>
</select>

	
	<select id="countCompanyProjectsBySearch" resultType="Long">
  SELECT COUNT(*)
  FROM TBL_PROJECT_M p
  WHERE project_is_deleted_yn = 'N'
  
  <if test="request.keyword != null and request.searchType == 'title'">
    AND p.project_ttl LIKE CONCAT('%', #{request.keyword}, '%')
  </if>
  <if test="request.keyword != null and request.searchType == 'content'">
    AND (
      p.project_description_txt LIKE CONCAT('%', #{request.keyword}, '%')
      OR p.project_preference_txt LIKE CONCAT('%', #{request.keyword}, '%')
    )
  </if>
  <if test="request.keyword != null and request.searchType == 'all'">
    AND (
      p.project_ttl LIKE CONCAT('%', #{request.keyword}, '%')
      OR p.project_description_txt LIKE CONCAT('%', #{request.keyword}, '%')
      OR p.project_preference_txt LIKE CONCAT('%', #{request.keyword}, '%')
    )
  </if>

  <!-- ✅ status 조건 추가 -->
  <if test="request.status == 'recruiting'">
    <![CDATA[
      AND NOW() BETWEEN p.project_recruit_start_dt AND p.project_recruit_end_dt
    ]]>
  </if>

  <if test="request.status == 'scheduled'">
    <![CDATA[
      AND NOW() < p.project_recruit_start_dt
    ]]>
  </if>

  <if test="request.status == 'closed'">
    <![CDATA[
      AND NOW() > p.project_recruit_end_dt
    ]]>
  </if>
</select>


	<select id="judgeProjectRecruitStatus" resultType="String">
	  <![CDATA[
	    SELECT
	      CASE
	        WHEN NOW() < project_recruit_start_dt THEN '채용예정'
	        WHEN NOW() > project_recruit_end_dt THEN '지원마감'
	        ELSE '채용중'
	      END AS recruit_status
	    FROM TBL_PROJECT_M
	    WHERE project_sq = #{projectSq}
	  ]]>
	</select>
	
	<select id="countCompanyProjectsByStatus" resultType="com.example.demo.domain.project.dto.response.ProjectRecruitStatus">
  <![CDATA[
    SELECT
      COUNT(*) AS allCount,
      SUM(CASE WHEN NOW() < project_recruit_start_dt THEN 1 ELSE 0 END) AS scheduled,
      SUM(CASE WHEN NOW() > project_recruit_end_dt THEN 1 ELSE 0 END) AS closed,
      SUM(CASE WHEN NOW() BETWEEN project_recruit_start_dt AND project_recruit_end_dt THEN 1 ELSE 0 END) AS recruiting
    FROM TBL_PROJECT_M
  ]]>
	  <where>
	    project_is_deleted_yn = 'N'
	    AND company_sq = #{companySq}
	
	    <if test="request.keyword != null and request.keyword != '' and request.searchType == 'title'">
	      <![CDATA[
	        AND project_ttl LIKE CONCAT('%', #{request.keyword}, '%')
	      ]]>
	    </if>
	
	    <if test="request.keyword != null and request.keyword != '' and request.searchType == 'content'">
	      <![CDATA[
	        AND (
	          project_description_txt LIKE CONCAT('%', #{request.keyword}, '%')
	          OR project_preference_txt LIKE CONCAT('%', #{request.keyword}, '%')
	        )
	      ]]>
	    </if>
	
	    <if test="request.keyword != null and request.keyword != '' and request.searchType == 'all'">
	      <![CDATA[
	        AND (
	          project_ttl LIKE CONCAT('%', #{request.keyword}, '%')
	          OR project_description_txt LIKE CONCAT('%', #{request.keyword}, '%')
	          OR project_preference_txt LIKE CONCAT('%', #{request.keyword}, '%')
	        )
	      ]]>
	    </if>
	  </where>
	</select>



	<select id="findCompanySqFromProjectSq" parameterType="Long" resultType="Long">
    SELECT company_sq
    FROM TBL_PROJECT_M
    WHERE project_sq = #{projectSq} AND project_is_deleted_yn = 'N'	
	</select>
	
	<select id="findBySq" parameterType="Long" resultType="com.example.demo.domain.project.entity.Project">
    SELECT *
    FROM TBL_PROJECT_M 
    WHERE project_sq = #{projectSq} AND project_is_deleted_yn = 'N'
	</select>
	
	<select id="findAddressSqByProjectSq" parameterType="Long" resultType="Long">
	    SELECT address_sq
	    FROM TBL_PROJECT_M
	    WHERE project_sq = #{projectSq}	
	</select>

	<insert id="insertProject" parameterType="com.example.demo.domain.project.entity.Project" useGeneratedKeys="true" keyProperty="projectSq">
		INSERT INTO TBL_PROJECT_M (
		company_sq,
		address_sq,
		project_ttl,
		project_image_url,
		project_developer_grade_cd,
		project_required_education_cd,
		project_salary,
		project_start_dt,
		project_end_dt,
		project_recruit_start_dt,
		project_recruit_end_dt,
		project_preference_txt,
		project_description_txt,
		project_created_at_dtm,
		project_modified_at_dtm,
		project_candidate_cnt,
		project_scrap_cnt,
		project_is_notification_yn,
		project_is_deleted_yn,
		project_view_cnt
		) VALUES (
		#{companySq},
		#{addressSq},
		#{projectTtl},
		#{projectImageUrl},
		#{projectDeveloperGradeCd},
		#{projectRequiredEducationCd},
		#{projectSalary},
		#{projectStartDt},
		#{projectEndDt},
		#{projectRecruitStartDt},
		#{projectRecruitEndDt},
		#{projectPreferenceTxt},
		#{projectDescriptionTxt},
		NOW(),
		NOW(),
		0,
		0,
		#{projectIsNotificationYn},
		"N",
		0
		)
	</insert>
	
	<insert id="insertScrap" parameterType="com.example.demo.domain.project.dto.request.ScrapInsertRequest">
    INSERT INTO TBL_SCRAP_S (user_sq, company_sq, project_sq, scrap_type_cd)
    VALUES (#{userSq}, #{companySq}, #{projectSq}, #{scrapTypeCd})
	</insert>
	
	<insert id="insertContracts" parameterType="map">
    INSERT INTO TBL_PROJECT_CONTRACT_TYPE_S (
        project_sq,
        contract_type_cd
    )
    VALUES
    <foreach collection="contractTypes" item="type" separator=",">
        (#{type.projectSq}, #{type.contractTypeCd})
    </foreach>
	</insert>

	
	<insert id="insertJobs" parameterType="map">
    INSERT INTO TBL_PROJECT_RECRUIT_JOB_ROLE_S (
        project_sq,
        recruit_job_position_type_cd
    )
    VALUES 
        <foreach collection="recruitJobs" item="type" separator=",">
	        (#{type.projectSq}, #{type.recruitJobPosTypCd})
	</foreach>
	</insert>
	
	
	<insert id="insertSkills" parameterType="map">
    INSERT INTO TBL_PROJECT_REQUIRED_SKILL_TAG_S (
        project_sq,
        skill_tag_sq,
        parent_skill_tag_sq,
        skill_tag_lvl,
        skill_tag_nm
    )
    VALUES
    <foreach collection="skills" item="type" separator=",">
        (#{projectSq}, #{type.skillTagSq}, #{type.parentSkillTagSq}, #{type.skillTagLvl}, #{type.skillTagNm})
    </foreach>
	</insert>
	
	<insert id="insertPreferSkills" parameterType="map">
    INSERT INTO TBL_PROJECT_PREFERRED_SKILL_TAG_S (
        project_sq,
        skill_tag_sq,
        parent_skill_tag_sq,
        skill_tag_lvl,
        skill_tag_nm
    )
    VALUES 
        <foreach collection="preferSkills" item="type" separator=",">
        	(#{projectSq}, #{type.skillTagSq}, #{type.parentSkillTagSq}, #{type.skillTagLvl}, #{type.skillTagNm})
    	</foreach>
	</insert>

	<insert id="insertProjectApplication"
			parameterType="com.example.demo.domain.project.entity.ProjectApplicationEntity"
			useGeneratedKeys="true"
			keyProperty="projectApplicationSq">
		INSERT INTO TBL_PROJECT_APPLICATION_H (
		project_sq,
		resume_sq,
		company_sq,
		project_application_status_cd,
		project_application_member_type_cd,
		project_application_created_at_dtm,
		selected_interview_dtm
		) VALUES (
		#{projectSq},
		#{resumeSq},
		#{companySq},
		#{projectApplicationStatusCd},
		#{projectApplicationMemberTypeCd},
		NOW(),
		#{selectedInterviewDtm}
		)
	</insert>
	
	<insert id="insertInterviewTimes">
	  INSERT INTO TBL_PROJECT_INTERVIEW_TIME_SLOT_S (project_sq, interview_available_dtm)
	  VALUES
	  <foreach collection="interviewTimes" item="time" separator=",">
	    (#{projectSq}, #{time})
	  </foreach>
	</insert>

	<update id="increaseApplication" parameterType="long">
		UPDATE TBL_PROJECT_M
		SET project_candidate_cnt = project_candidate_cnt + 1
		WHERE project_sq = #{projectSq}
	</update>

	<update id="increaseScrap" parameterType="long">
		UPDATE TBL_PROJECT_M
		SET project_scrap_cnt = project_scrap_cnt + 1
		WHERE project_sq = #{projectSq}
	</update>

	<update id="decreaseScrap" parameterType="long">
		UPDATE TBL_PROJECT_M
		SET project_scrap_cnt = project_scrap_cnt - 1
		WHERE project_sq = #{projectSq}
	</update>
	
	
	
	<select id="findSkillFormList" resultType="com.example.demo.domain.project.dto.response.SingleSkillInfoResponse">
	    SELECT 
	      p.skill_tag_nm AS parentSkillTagNm,
	      c.skill_tag_nm AS childSkillTagNm
	    FROM TBL_SKILL_TAG_C p
	    JOIN TBL_SKILL_TAG_C c ON p.skill_tag_sq = c.parent_skill_tag_sq
	    WHERE p.skill_tag_is_deleted_yn = 'N' AND c.skill_tag_is_deleted_yn = 'N'
	    AND p.skill_tag_nm IN ('언어', '프레임워크', '툴')
	    ORDER BY p.skill_tag_sq, c.skill_tag_sq
  	</select>
	
	<select id="findSkillInfoList" resultType="com.example.demo.domain.project.dto.response.SingleSkillInfoResponse">
	    SELECT 
	      p.skill_tag_nm AS parentSkillTagNm,
	      c.skill_tag_nm AS childSkillTagNm
	    FROM TBL_SKILL_TAG_C p
	    JOIN TBL_SKILL_TAG_C c ON p.skill_tag_sq = c.parent_skill_tag_sq
	    WHERE p.skill_tag_is_deleted_yn = 'N' AND c.skill_tag_is_deleted_yn = 'N'
	    ORDER BY p.skill_tag_sq, c.skill_tag_sq
  	</select>
  	
  	<select id="findReqSkillsByProjectSq" parameterType = "Long" resultType="com.example.demo.domain.project.dto.response.SingleSkillInfoResponse">
	    SELECT DISTINCT
        p.skill_tag_nm AS parentSkillTagNm,
        c.skill_tag_nm AS childSkillTagNm
	    FROM TBL_PROJECT_REQUIRED_SKILL_TAG_S r
	    JOIN TBL_SKILL_TAG_C c ON r.skill_tag_sq = c.skill_tag_sq
	    JOIN TBL_SKILL_TAG_C p ON c.parent_skill_tag_sq = p.skill_tag_sq
	    WHERE c.skill_tag_is_deleted_yn = 'N'
	      AND p.skill_tag_is_deleted_yn = 'N'
	    ORDER BY p.skill_tag_nm, c.skill_tag_nm
  	</select>
  	
  	<select id="findPreferSkillsByProjectSq" parameterType = "Long" resultType="com.example.demo.domain.project.dto.response.SingleSkillInfoResponse">
	    SELECT DISTINCT
        p.skill_tag_nm AS parentSkillTagNm,
        c.skill_tag_nm AS childSkillTagNm
	    FROM TBL_PROJECT_PREFERRED_SKILL_TAG_S r
	    JOIN TBL_SKILL_TAG_C c ON r.skill_tag_sq = c.skill_tag_sq
	    JOIN TBL_SKILL_TAG_C p ON c.parent_skill_tag_sq = p.skill_tag_sq
	    WHERE c.skill_tag_is_deleted_yn = 'N'
	      AND p.skill_tag_is_deleted_yn = 'N'
	    ORDER BY p.skill_tag_nm, c.skill_tag_nm
  	</select>
  
	
	
	<select id="findWorkTypesByProjectSq" resultType="String" parameterType="Long">
	    SELECT c.common_code_nm
		FROM TBL_PROJECT_CONTRACT_TYPE_S m
		JOIN TBL_COMMON_CODE_C c
		  ON m.contract_type_cd = c.common_code_sq
		WHERE m.project_sq = #{projectSq}
  	</select>
  	
  	<select id="findJobsByProjectSq" resultType="String" parameterType="Long">
	    SELECT c.common_code_nm
		FROM TBL_PROJECT_RECRUIT_JOB_ROLE_S m
		JOIN TBL_COMMON_CODE_C c
		  ON m.recruit_job_position_type_cd = c.common_code_sq
		WHERE m.project_sq = #{projectSq}
  	</select>
  	
  	<select id="findInterviewTimeMinMaxBySq" resultType="map" parameterType="Long">
	    SELECT 
	    MIN(interview_available_dtm) AS minTime,
	    MAX(interview_available_dtm) AS maxTime
	  FROM TBL_PROJECT_INTERVIEW_TIME_SLOT_S
	  WHERE project_sq = #{projectSq}
  	</select>
  	
  	<select id="findInterviewTimesByProjectSq" resultType="java.time.LocalDateTime" parameterType="Long">
	    SELECT interview_available_dtm
	  	FROM TBL_PROJECT_INTERVIEW_TIME_SLOT_S
	  	WHERE project_sq = #{projectSq} AND interview_is_selected_yn = 'N'
  	</select>
  	
  	<select id="findInterviewSqTmByProjectSq"
        resultType="com.example.demo.domain.project.dto.response.InterviewTimeInfoResponse"
        parameterType="Long">
	    SELECT 
	        interview_sq AS interviewTimeSq,
	        interview_available_dtm AS interviewTime
	    FROM TBL_PROJECT_INTERVIEW_TIME_SLOT_S
	    WHERE project_sq = #{projectSq}
	      AND interview_is_selected_yn = 'N'
	</select>
	
	<select id="findProjectScrapCnt" resultType="Long">
    SELECT project_scrap_cnt
    FROM TBL_PROJECT_M
    WHERE project_sq = #{projectSq}
	</select>
  	
  	
  	<delete id="deleteProjectScrap">
	  DELETE FROM TBL_SCRAP_S
	  WHERE project_sq = #{projectSq} AND user_sq = #{userSq}
	</delete>
	
	<delete id="deleteProjectContracts">
	  DELETE FROM TBL_PROJECT_CONTRACT_TYPE_S
	  WHERE project_sq = #{projectSq} 
	</delete>
	
	<delete id="deleteProjectJobRoles">
	  DELETE FROM TBL_PROJECT_RECRUIT_JOB_ROLE_S
	  WHERE project_sq = #{projectSq} 
	</delete>
	
	<delete id="deleteProjectInterviewTimes">
	  DELETE FROM TBL_PROJECT_INTERVIEW_TIME_SLOT_S
	  WHERE project_sq = #{projectSq} 
	</delete>
	
	<delete id="deleteProjectAddress">
	  DELETE FROM TBL_ADDRESS_S
	  WHERE address_sq = #{addressSq} 
	</delete>
	<update id="updateViewCnt" parameterType="long">
		UPDATE TBL_PROJECT_M
		SET project_view_cnt = project_view_cnt + 1
		WHERE project_sq = #{projectSq}
	</update>
	<update id="updateProject" parameterType="com.example.demo.domain.project.entity.Project">
		UPDATE TBL_PROJECT_M
		SET
		project_ttl = #{projectTtl},
		project_description_txt = #{projectDescriptionTxt},
		project_start_dt = #{projectStartDt},
		project_end_dt = #{projectEndDt},
		project_recruit_start_dt = #{projectRecruitStartDt},
		project_recruit_end_dt = #{projectRecruitEndDt},
		project_preference_txt = #{projectPreferenceTxt},
		project_salary = #{projectSalary},
		project_image_url = #{projectImageUrl},
		address_sq = #{addressSq},
		company_sq = #{companySq},
		project_developer_grade_cd = #{projectDeveloperGradeCd},
		project_required_education_cd = #{projectRequiredEducationCd},
		project_is_notification_yn = #{projectIsNotificationYn},
		project_modified_at_dtm = NOW()
		WHERE project_sq = #{projectSq}
	</update>

	<update id="updateAddress" parameterType="map">
		UPDATE TBL_PROJECT_M
		SET address_sq = #{newAddressSq}
		WHERE project_sq = #{projectSq}
	</update>

	<update id="softDeleteProject" parameterType="long">
		UPDATE TBL_PROJECT_M
		SET project_is_deleted_yn = 'Y',
		project_modified_at_dtm = NOW()
		WHERE project_sq = #{projectSq}
	</update>
</mapper>